package at.rocboron.euler.question12

import at.rocboron.euler.ResultNotFoundException
import at.rocboron.euler.calculator.extension.isEven
import at.rocboron.euler.calculator.extension.isFactorOf
import at.rocboron.euler.calculator.extension.isPrime

/** Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
class Problem12(val numberOfDivisors: Int) {

    fun run(): Long {
        var triangleNumber = 0L
        for (i in 1..Long.MAX_VALUE) {
            triangleNumber += i
            if (countNumberOfDivisors(triangleNumber) > numberOfDivisors) {
                return triangleNumber
            }
        }
        throw ResultNotFoundException()
    }

    var maxDividers = 0

    private fun countNumberOfDivisors(triangleNumber: Long): Int {
        if (!triangleNumber.isEven()) {
            return 0
        }

        val divisors = (2..triangleNumber / 2)
            .filter { triangleNumber.isFactorOf(it) }
        val count = divisors.count() + 2

        if (count > maxDividers) {
            maxDividers = count
            println("New record: $maxDividers: $triangleNumber has $count divisors: ${divisors + triangleNumber + 1}")
        }

        return count
    }
}