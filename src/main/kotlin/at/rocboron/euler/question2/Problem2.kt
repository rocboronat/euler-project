package at.rocboron.euler.question2

import at.rocboron.euler.calculator.extension.isEven

/** Even Fibonacci numbers
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */
class Problem2 {

    fun run(): Long {
        val list = getFibonacciNumbers(4000000)
        return list
            .filter(isEven())
            .sum()
    }

    private fun isEven(): (Long) -> Boolean {
        return { it.isEven() }
    }

    fun getFibonacciNumbers(lowerThan: Long): ArrayList<Long> {
        if (lowerThan <= 2L) {
            return arrayListOf(1)
        }
        val list = arrayListOf(1L, 2L)
        while (list.last() < lowerThan) {
            val nextValue = nextFibonacciNumber(list)
            list.add(nextValue)
        }
        return list
    }

    private fun nextFibonacciNumber(list: List<Long>): Long {
        return list.last() +
                list[list.size - 2]
    }
}